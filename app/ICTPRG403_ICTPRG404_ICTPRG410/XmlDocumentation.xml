<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ICTPRG403_ICTPRG404_ICTPRG410</name>
    </assembly>
    <members>
        <member name="T:ICTPRG403_ICTPRG404_ICTPRG410.Add">
            <summary>
            The logic for the Add page
            The user can enter information inside the text boxes.
            If the user clicks the "Save" button, the information gets transferred into a Person object and then gets saved onto the database.
            </summary>
            <summary>
            Add
            </summary>
        </member>
        <member name="M:ICTPRG403_ICTPRG404_ICTPRG410.Add.#ctor">
            <summary>
            Constructor for the Add page. It is completely empty besides the InitializeComponent() which is responsible for loading the page.
            </summary>
        </member>
        <member name="M:ICTPRG403_ICTPRG404_ICTPRG410.Add.Btn_SaveInput_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Btn_SaveInput_Click retrieves information from the text boxes
            Afterwards, a Person object is created whith the values retrieved from text boxes
            That person object gets passed onto repository class which uses it to create a new person.
            Afterwards, the NavigateToMainMenu() is executed.
            As per specifications, "try catch" was added to catch any potential errors.
            The Id is set to -1, because the Id is irrelevant. Id is not used when creating a person, as the SQL creates a unique ID for you.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ICTPRG403_ICTPRG404_ICTPRG410.Add.Btn_GoBack_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This button calls the NavigateToMainMenu() method.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ICTPRG403_ICTPRG404_ICTPRG410.Add.NavigateToMainMenu">
            <summary>
            NavigateToMainMenu closes the current page and opens the "Main Menu" page
            </summary>
        </member>
        <member name="M:ICTPRG403_ICTPRG404_ICTPRG410.Add.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ICTPRG403_ICTPRG404_ICTPRG410.App">
            <summary>
            Interaction logic for App.xaml
            </summary>
            <summary>
            App
            </summary>
        </member>
        <member name="M:ICTPRG403_ICTPRG404_ICTPRG410.App.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:ICTPRG403_ICTPRG404_ICTPRG410.App.Main">
            <summary>
            Application Entry Point.
            </summary>
        </member>
        <member name="T:ICTPRG403_ICTPRG404_ICTPRG410.Data.Repository">
            <summary>
            Repository class is responsible for connecting to the database and implementing changes to the database
            </summary>
        </member>
        <member name="M:ICTPRG403_ICTPRG404_ICTPRG410.Data.Repository.#ctor">
            <summary>
            I have initialised and assigned the correct value for the _connectionString field here using ConfigurationManager. 
            Connects to the SQL Database.
            </summary>
        </member>
        <member name="M:ICTPRG403_ICTPRG404_ICTPRG410.Data.Repository.GetPeople">
            <summary>
            Reads the database, gets the information regarding every person in the database and puts it into IEnumerable Person
            Afterwards disposes of the SqlConnection and SqlCommand to save resources
            </summary>
            <returns>Information regarding every person inside the database.</returns>
        </member>
        <member name="M:ICTPRG403_ICTPRG404_ICTPRG410.Data.Repository.InsertPerson(ICTPRG403_ICTPRG404_ICTPRG410.Data.Person)">
            <summary>
            InsertPerson() method adds a Person (object) to the SQL database.
            Additionally, it records how many lines have been affected.
            Afterwards disposes of the SqlConnection and SqlCommand to save resources.
            </summary>
            <param name="p">The person that is to be added to the database</param>
            <returns>The number of rows affected by InsertPerson()</returns>
        </member>
        <member name="M:ICTPRG403_ICTPRG404_ICTPRG410.Data.Repository.UpdatePerson(ICTPRG403_ICTPRG404_ICTPRG410.Data.Person)">
            <summary>
            UpdatePerson() method updates the Person's information inside the database.
            Essentially, it retrieves the ID from Person object and then replaces a(another) person in the database with the same ID.
            Additionally, it records how many lines have been affected by it.
            Afterwards disposes of the SqlConnection and SqlCommand to save resources
            </summary>
            <param name="p">The person whose information is to be updated in the database</param>
            <returns>The number of rows affected by UpdatePerson()</returns>
        </member>
        <member name="M:ICTPRG403_ICTPRG404_ICTPRG410.Data.Repository.DeletePerson(ICTPRG403_ICTPRG404_ICTPRG410.Data.Person)">
            <summary>
            DeletePerson() method removes the Person's information inside the database.
            Essentially, it retrieves the ID from Person object and then deletes a database record with the same ID.
            Additionally, it records how many lines have been affected by it.
            Afterwards disposes of the SqlConnection and SqlCommand to save resources
            </summary>
            <param name="p">The person whose information is to be deleted in the database</param>
            <returns>The number of rows affected by DeletePerson()</returns>
        </member>
        <member name="T:ICTPRG403_ICTPRG404_ICTPRG410.Data.Person">
            <summary>
            Person class is used to create Person objects.
            These objects will then get transferred into a database.
            </summary>
        </member>
        <member name="P:ICTPRG403_ICTPRG404_ICTPRG410.Data.Person.Id">
            <summary>
            The database unique identifier (ID) of the Person.
            </summary>
        </member>
        <member name="P:ICTPRG403_ICTPRG404_ICTPRG410.Data.Person.FirstName">
            <summary>
            The First Name of the Person.
            </summary>
        </member>
        <member name="P:ICTPRG403_ICTPRG404_ICTPRG410.Data.Person.LastName">
            <summary>
            The Last Name of the Person.
            </summary>
        </member>
        <member name="P:ICTPRG403_ICTPRG404_ICTPRG410.Data.Person.Weight">
            <summary>
            The Weight of the Person.
            </summary>
        </member>
        <member name="P:ICTPRG403_ICTPRG404_ICTPRG410.Data.Person.Height">
            <summary>
            The Height of the Person.
            </summary>
        </member>
        <member name="T:ICTPRG403_ICTPRG404_ICTPRG410.Delete">
            <summary>
            The logic for the Delete page
            This page gets information regarding the person that is to be deleted from the ToBeDeleted person
            Afterwards the user is displayed with information regarding the person that they chose to delete
            If the user clicks the "Delete" button, the program deletes the person from the database and goes back to Main Menu.
            </summary>
            <summary>
            Delete
            </summary>
        </member>
        <member name="P:ICTPRG403_ICTPRG404_ICTPRG410.Delete.ToBeDeleted">
            <summary>
            Retrieves the ToBeDeleted person from the constructor, thus allowing it to be used by the Btn_Delete_Click
            </summary>
        </member>
        <member name="M:ICTPRG403_ICTPRG404_ICTPRG410.Delete.#ctor(ICTPRG403_ICTPRG404_ICTPRG410.Data.Person)">
            <summary>
            Constructor for the Delete page
            Constructor requires the Person object
            this.ToBeDeleted = ToBeDeleted is responsible for passing this person object to the entire program (so that it can be used by Btn_Delete_Click, otherwise it won't work)
            The constructor gets the information about the person and passes it onto text boxes.
            The textboxes are read-only and cannot be edited. The user is shown the information just to confirm that they want to delete this.
            Theoretically, even if these textboxes were edited, it wouldn't make a difference as they are just used to show information.
            </summary>
            <param name="ToBeDeleted">The person whose information is to be erased</param>
        </member>
        <member name="M:ICTPRG403_ICTPRG404_ICTPRG410.Delete.Btn_Delete_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Deletes the person(from the database) that was passed into the constructor when the page was loaded
            As per specifications, "try catch" was added to catch any potential errors.
            After the person has been successfully deleted, the NavigateToMainMenu() is executed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ICTPRG403_ICTPRG404_ICTPRG410.Delete.Btn_GoBack_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This button calls the NavigateToMainMenu() method
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ICTPRG403_ICTPRG404_ICTPRG410.Delete.NavigateToMainMenu">
            <summary>
            NavigateToMainMenu closes the current page and opens the "Main Menu" page
            </summary>
        </member>
        <member name="M:ICTPRG403_ICTPRG404_ICTPRG410.Delete.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ICTPRG403_ICTPRG404_ICTPRG410.Edit">
            <summary>
            The logic for the Edit page
            This page gets information regarding the person that is to be edited from the ToBeEdited person
            Afterwards a user can edit the person's information (everything except ID).
            The user clicks the "Save" button . Afterwards the program saves the edited person into the database and goes back to the main menu.
            </summary>
            <summary>
            Edit
            </summary>
        </member>
        <member name="M:ICTPRG403_ICTPRG404_ICTPRG410.Edit.#ctor(ICTPRG403_ICTPRG404_ICTPRG410.Data.Person)">
            <summary>
            Constructor for the Edit page
            Constructor requires the Person object
            The constructor gets the information about the person and passes it onto text boxes.
            </summary>
            <param name="ToBeEdited">The person whose information is to be edited</param>
        </member>
        <member name="M:ICTPRG403_ICTPRG404_ICTPRG410.Edit.Btn_SaveInput_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Btn_SaveInput_Click retrieves information from the text boxes
            Afterwards, a Person object is created whith the values retrieved from text boxes
            The program then attempts to update the information inside the database (with the Person object created)
            As per specifications, "try catch" was added to catch any potential errors.
            After the person has been successfully updated/edited, the NavigateToMainMenu() is executed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ICTPRG403_ICTPRG404_ICTPRG410.Edit.Btn_GoBack_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This button calls the NavigateToMainMenu() method.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ICTPRG403_ICTPRG404_ICTPRG410.Edit.NavigateToMainMenu">
            <summary>
            NavigateToMainMenu closes the current page and opens the "Main Menu" page
            </summary>
        </member>
        <member name="M:ICTPRG403_ICTPRG404_ICTPRG410.Edit.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ICTPRG403_ICTPRG404_ICTPRG410.MainWindow">
            <summary>
            Logic for the MainWindow page
            MainWindow retrieves information on all persons from the database and displays it onto the DataGrid.
            Also MainWindow contains buttons that redirect to other pages.
            Lastly, MainWindow retrieves the specific person chosen in the DataGrid and passes this information onto other classes.
            </summary>
            <summary>
            MainWindow
            </summary>
        </member>
        <member name="F:ICTPRG403_ICTPRG404_ICTPRG410.MainWindow.ListOfAllPersons">
            <summary>
            This variable is getting used by multiple functions within the MainWindow class.
            Contains information regarding all the persons in the database
            </summary>
        </member>
        <member name="M:ICTPRG403_ICTPRG404_ICTPRG410.MainWindow.#ctor">
            <summary>
            Constructor for the MainWindow page.
            This constructor retrieves the list of all people (ListOfAllPersons) from the database from the Repository class.
            Additionally, it updates the DataGrid with information from the database by using ListOfAllPersons.
            </summary>
        </member>
        <member name="M:ICTPRG403_ICTPRG404_ICTPRG410.MainWindow.BtnEdit_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Gets the index (which row did the user click the "Edit" button at)
            After getting the index, it selects the person inside ListOfAllPersons that corresponds to that index.
            So for instance, if the button was clicked in the second row, the second person inside ListOfAllPersons is selected.
            Afterwards, it redirects to the Edit page and passes the value of the Person who needs to be edited there.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ICTPRG403_ICTPRG404_ICTPRG410.MainWindow.BtnDelete_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Gets the index (which row did the user click the "Delete" button at)
            After getting the index, it selects the person inside ListOfAllPersons that corresponds to that index.
            So for instance, if the button was clicked in the third row, the third person inside ListOfAllPersons is selected.
            Afterwards, it redirects to the Delete page and passes the value of the Person who needs to be deleted there.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ICTPRG403_ICTPRG404_ICTPRG410.MainWindow.BtnAdd_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Navigates to the Add page
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ICTPRG403_ICTPRG404_ICTPRG410.MainWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ICTPRG403_ICTPRG404_ICTPRG410.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ICTPRG403_ICTPRG404_ICTPRG410.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ICTPRG403_ICTPRG404_ICTPRG410.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
    </members>
</doc>
